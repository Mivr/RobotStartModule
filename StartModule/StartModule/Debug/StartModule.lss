
StartModule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000290  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000290  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800062  00800062  00000326  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003bc  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000023e  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000484  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00000e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002a2  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c5  00000000  00000000  000011f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000013b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	78 c0       	rjmp	.+240    	; 0xf6 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e0 e9       	ldi	r30, 0x90	; 144
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 e6       	ldi	r26, 0x62	; 98
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a7 38       	cpi	r26, 0x87	; 135
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	d0 d0       	rcall	.+416    	; 0x1e4 <main>
  44:	23 c1       	rjmp	.+582    	; 0x28c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <EepromWriteByte>:
//
//////////////////////////////////////////////////////////////////////////
void EepromWriteByte(uint8_t* address, uint8_t data)
{
	// stop interrupts as they may damage EEPROM
	cli();
  48:	f8 94       	cli
	
	// wait for the EEPROM to be ready before writing
	eeprom_busy_wait();
  4a:	e1 99       	sbic	0x1c, 1	; 28
  4c:	fe cf       	rjmp	.-4      	; 0x4a <EepromWriteByte+0x2>

	// write to EEPROM
	eeprom_write_byte(address, data);
  4e:	11 d1       	rcall	.+546    	; 0x272 <eeprom_write_byte>

	// return interrupts as normal
	sei();
  50:	78 94       	sei
  52:	08 95       	ret

00000054 <tryToDecode>:

void tryToDecode()
{
	uint8_t bitsCounter = 13;
	
	dataBuffer = 0;
  54:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <dataBuffer+0x1>
  58:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <dataBuffer>
	
	// start of stream detect
	if (pulses[0] > 9 && pulses[1] == SHORT_POSITIVE_PULSE)
  5c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <pulses>
  60:	8a 30       	cpi	r24, 0x0A	; 10
  62:	40 f4       	brcc	.+16     	; 0x74 <tryToDecode+0x20>
				iterator++;
			}
		}
	}
	
	if (indexInPulsesBuffer == 29)
  64:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  68:	8d 31       	cpi	r24, 0x1D	; 29
  6a:	09 f0       	breq	.+2      	; 0x6e <tryToDecode+0x1a>
  6c:	3f c0       	rjmp	.+126    	; 0xec <__stack+0x4d>
  6e:	e7 e6       	ldi	r30, 0x67	; 103
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	33 c0       	rjmp	.+102    	; 0xda <__stack+0x3b>
	uint8_t bitsCounter = 13;
	
	dataBuffer = 0;
	
	// start of stream detect
	if (pulses[0] > 9 && pulses[1] == SHORT_POSITIVE_PULSE)
  74:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <pulses+0x1>
  78:	81 30       	cpi	r24, 0x01	; 1
  7a:	a1 f7       	brne	.-24     	; 0x64 <tryToDecode+0x10>
  7c:	20 e0       	ldi	r18, 0x00	; 0
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	9d e0       	ldi	r25, 0x0D	; 13
	{
		uint8_t iterator = 2;
		while (iterator < 29)
		{
			if (pulses[iterator] < 4 && pulses[iterator + 1] < 4)
  84:	e8 2f       	mov	r30, r24
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	e9 59       	subi	r30, 0x99	; 153
  8a:	ff 4f       	sbci	r31, 0xFF	; 255
  8c:	70 81       	ld	r23, Z
  8e:	74 30       	cpi	r23, 0x04	; 4
  90:	e0 f4       	brcc	.+56     	; 0xca <__stack+0x2b>
  92:	61 81       	ldd	r22, Z+1	; 0x01
  94:	64 30       	cpi	r22, 0x04	; 4
  96:	c8 f4       	brcc	.+50     	; 0xca <__stack+0x2b>
			{
				dataBuffer |= ((pulses[iterator] % 2 == 0 && pulses[iterator + 1] % 2 == 1) << bitsCounter);
  98:	70 fd       	sbrc	r23, 0
  9a:	04 c0       	rjmp	.+8      	; 0xa4 <__stack+0x5>
  9c:	46 2f       	mov	r20, r22
  9e:	41 70       	andi	r20, 0x01	; 1
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__stack+0x9>
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	fa 01       	movw	r30, r20
  aa:	09 2e       	mov	r0, r25
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <__stack+0x13>
  ae:	ee 0f       	add	r30, r30
  b0:	ff 1f       	adc	r31, r31
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <__stack+0xf>
  b6:	2e 2b       	or	r18, r30
  b8:	3f 2b       	or	r19, r31
				bitsCounter--;
  ba:	91 50       	subi	r25, 0x01	; 1
				iterator += 2 - (pulses[iterator + 1] > 1);
  bc:	62 30       	cpi	r22, 0x02	; 2
  be:	10 f4       	brcc	.+4      	; 0xc4 <__stack+0x25>
  c0:	62 e0       	ldi	r22, 0x02	; 2
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <__stack+0x27>
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	86 0f       	add	r24, r22
  c8:	01 c0       	rjmp	.+2      	; 0xcc <__stack+0x2d>
			}
			else
			{
				iterator++;
  ca:	8f 5f       	subi	r24, 0xFF	; 255
	
	// start of stream detect
	if (pulses[0] > 9 && pulses[1] == SHORT_POSITIVE_PULSE)
	{
		uint8_t iterator = 2;
		while (iterator < 29)
  cc:	8d 31       	cpi	r24, 0x1D	; 29
  ce:	d0 f2       	brcs	.-76     	; 0x84 <tryToDecode+0x30>
  d0:	30 93 86 00 	sts	0x0086, r19	; 0x800086 <dataBuffer+0x1>
  d4:	20 93 85 00 	sts	0x0085, r18	; 0x800085 <dataBuffer>
  d8:	c5 cf       	rjmp	.-118    	; 0x64 <tryToDecode+0x10>
	
	if (indexInPulsesBuffer == 29)
	{
		for (uint8_t i = 0; i<29; i++)
		{
			pulses[i] = pulses[i+1];
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	81 93       	st	Z+, r24
		}
	}
	
	if (indexInPulsesBuffer == 29)
	{
		for (uint8_t i = 0; i<29; i++)
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	e4 38       	cpi	r30, 0x84	; 132
  e2:	f8 07       	cpc	r31, r24
  e4:	d1 f7       	brne	.-12     	; 0xda <__stack+0x3b>
		{
			pulses[i] = pulses[i+1];
		}
		
		indexInPulsesBuffer--;
  e6:	8c e1       	ldi	r24, 0x1C	; 28
  e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	}
	
	handleEvent_dataReceivedOnIR(dataBuffer);
  ec:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <dataBuffer>
  f0:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <dataBuffer+0x1>
  f4:	5f c0       	rjmp	.+190    	; 0x1b4 <handleEvent_dataReceivedOnIR>

000000f6 <__vector_2>:
}

ISR (IR_PIN_ISR)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	4f 93       	push	r20
 106:	5f 93       	push	r21
 108:	6f 93       	push	r22
 10a:	7f 93       	push	r23
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	uint16_t buffer = TCNT0 - lastTimeTimerOverfllowed - 65535 * ( TCNT0 < lastTimeTimerOverfllowed);
 118:	82 b7       	in	r24, 0x32	; 50
 11a:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <lastTimeTimerOverfllowed>
 11e:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <lastTimeTimerOverfllowed+0x1>
 122:	42 b7       	in	r20, 0x32	; 50
 124:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <lastTimeTimerOverfllowed>
 128:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <lastTimeTimerOverfllowed+0x1>
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	82 1b       	sub	r24, r18
 130:	93 0b       	sbc	r25, r19
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	46 17       	cp	r20, r22
 13a:	57 07       	cpc	r21, r23
 13c:	10 f0       	brcs	.+4      	; 0x142 <__vector_2+0x4c>
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	82 0f       	add	r24, r18
 144:	93 1f       	adc	r25, r19
	pulses[indexInPulsesBuffer] = ( buffer > 1333 ) * 2 + !IR_GET_EDGE + 10 * (buffer < 444 || buffer > 2222);
 146:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <__data_end>
 14a:	e3 2f       	mov	r30, r19
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	86 33       	cpi	r24, 0x36	; 54
 150:	25 e0       	ldi	r18, 0x05	; 5
 152:	92 07       	cpc	r25, r18
 154:	10 f4       	brcc	.+4      	; 0x15a <__vector_2+0x64>
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	01 c0       	rjmp	.+2      	; 0x15c <__vector_2+0x66>
 15a:	22 e0       	ldi	r18, 0x02	; 2
 15c:	56 b3       	in	r21, 0x16	; 22
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	51 11       	cpse	r21, r1
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	24 0f       	add	r18, r20
 166:	8c 5b       	subi	r24, 0xBC	; 188
 168:	91 40       	sbci	r25, 0x01	; 1
 16a:	83 3f       	cpi	r24, 0xF3	; 243
 16c:	96 40       	sbci	r25, 0x06	; 6
 16e:	10 f4       	brcc	.+4      	; 0x174 <__vector_2+0x7e>
 170:	80 e1       	ldi	r24, 0x10	; 16
 172:	01 c0       	rjmp	.+2      	; 0x176 <__vector_2+0x80>
 174:	8a e1       	ldi	r24, 0x1A	; 26
 176:	e9 59       	subi	r30, 0x99	; 153
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	28 23       	and	r18, r24
 17c:	20 83       	st	Z, r18
	indexInPulsesBuffer++;
 17e:	3f 5f       	subi	r19, 0xFF	; 255
 180:	30 93 62 00 	sts	0x0062, r19	; 0x800062 <__data_end>
	lastTimeTimerOverfllowed = TCNT0;
 184:	82 b7       	in	r24, 0x32	; 50
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <lastTimeTimerOverfllowed+0x1>
 18c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <lastTimeTimerOverfllowed>
	tryToDecode();
 190:	61 df       	rcall	.-318    	; 0x54 <tryToDecode>
}
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <handleEvent_dataReceivedOnIR>:
		EEPROM_WRITE_STOP_COMMAND(currentStopCommand);
		
		LED_DRIVER_BLINK_LED_PROGRAMMING;
	}
	// start command received
	else if ((((((uint16_t) dataReceived & 0x3f << 8) | (uint16_t)dataReceived) == secondaryStartCommand) || dataReceived & 0x3f == RC5_ADR_EXPERIMENTAL && dataReceived == (currentStopCommand + 1)) && (IDLE == currentState))
 1b4:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <secondaryStartCommand>
 1b8:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <secondaryStartCommand+0x1>
 1bc:	28 17       	cp	r18, r24
 1be:	39 07       	cpc	r19, r25
 1c0:	81 f4       	brne	.+32     	; 0x1e2 <handleEvent_dataReceivedOnIR+0x2e>
 1c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	61 f4       	brne	.+24     	; 0x1e2 <handleEvent_dataReceivedOnIR+0x2e>
	{
		PORT_DRIVER_SET_STATE_ACTIVE();
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	88 bb       	out	0x18, r24	; 24
		
		LED_DRIVER_POWER_ON_LED;
 1ce:	8f b5       	in	r24, 0x2f	; 47
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	8f bd       	out	0x2f, r24	; 47
		
		EEPROM_WRITE_STATE(ACTIVE);
 1d4:	62 e0       	ldi	r22, 0x02	; 2
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	36 df       	rcall	.-404    	; 0x48 <EepromWriteByte>
		
		currentState = ACTIVE;
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 1e2:	08 95       	ret

000001e4 <main>:
//
//////////////////////////////////////////////////////////////////////////
int main()
{
	// initialize port driver
	PORT_DRIVER_INITIALIZE();
 1e4:	87 e0       	ldi	r24, 0x07	; 7
 1e6:	87 bb       	out	0x17, r24	; 23
	
	// initialize led driver
	LED_DRIVER_INITIALIZE;
 1e8:	8f b5       	in	r24, 0x2f	; 47
 1ea:	83 60       	ori	r24, 0x03	; 3
 1ec:	8f bd       	out	0x2f, r24	; 47
 1ee:	8a e0       	ldi	r24, 0x0A	; 10
 1f0:	86 bf       	out	0x36, r24	; 54
 1f2:	8f b5       	in	r24, 0x2f	; 47
 1f4:	8f 77       	andi	r24, 0x7F	; 127
 1f6:	8f bd       	out	0x2f, r24	; 47
	
	// load the EEPROM data in RAM mirror provided
	EEPROM_INITIALIZE(&currentState, &currentStopCommand);
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	33 d0       	rcall	.+102    	; 0x264 <eeprom_read_byte>
 1fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	
	// load secondary data for start and stop
	EEPROM_INITIALIZE_SECONDARY(&secondaryStartCommand, &secondaryStopCommand);
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	2e d0       	rcall	.+92     	; 0x264 <eeprom_read_byte>
 208:	c8 2f       	mov	r28, r24
 20a:	d0 e0       	ldi	r29, 0x00	; 0
 20c:	dc 2f       	mov	r29, r28
 20e:	cc 27       	eor	r28, r28
 210:	d0 93 66 00 	sts	0x0066, r29	; 0x800066 <secondaryStartCommand+0x1>
 214:	c0 93 65 00 	sts	0x0065, r28	; 0x800065 <secondaryStartCommand>
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	23 d0       	rcall	.+70     	; 0x264 <eeprom_read_byte>
 21e:	c8 2b       	or	r28, r24
 220:	d0 93 66 00 	sts	0x0066, r29	; 0x800066 <secondaryStartCommand+0x1>
 224:	c0 93 65 00 	sts	0x0065, r28	; 0x800065 <secondaryStartCommand>
	
	// initialize the IR receiver sub module
	IR_INITIALIZE;
 228:	83 b7       	in	r24, 0x33	; 51
 22a:	83 60       	ori	r24, 0x03	; 3
 22c:	83 bf       	out	0x33, r24	; 51
 22e:	12 be       	out	0x32, r1	; 50
 230:	89 b7       	in	r24, 0x39	; 57
 232:	82 60       	ori	r24, 0x02	; 2
 234:	89 bf       	out	0x39, r24	; 57
 236:	ac 9a       	sbi	0x15, 4	; 21
 238:	8b b7       	in	r24, 0x3b	; 59
 23a:	80 62       	ori	r24, 0x20	; 32
 23c:	8b bf       	out	0x3b, r24	; 59

	// check start state read from EEPROM
	// in case the saved state was ACTIVE (we lost power during active fight)
	// we need to set the ports state and LED states accordingly
	if (ACTIVE == currentState)
 23e:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 242:	92 30       	cpi	r25, 0x02	; 2
 244:	41 f4       	brne	.+16     	; 0x256 <main+0x72>
	{
		PORT_DRIVER_SET_STATE_ACTIVE();
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	88 bb       	out	0x18, r24	; 24
		
		LED_DRIVER_POWER_ON_LED;
 24a:	8f b5       	in	r24, 0x2f	; 47
 24c:	80 68       	ori	r24, 0x80	; 128
 24e:	8f bd       	out	0x2f, r24	; 47
		
		currentState = ACTIVE;
 250:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
 254:	05 c0       	rjmp	.+10     	; 0x260 <main+0x7c>
	}
	// in any other case we go to IDLE state
	else
	{
		// in case we need to go to IDLE state set the port state accordingly
		PORT_DRIVER_SET_STATE_IDLE();
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	88 bb       	out	0x18, r24	; 24
		
		// LED state is OFF from INIT so no need to set it explicitly
		
		// we need to set the state of the state explicitly as other code depends on this state
		currentState = IDLE;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	}
	
    // start interrupts (initialization phase ended)
	sei();
 260:	78 94       	sei
 262:	ff cf       	rjmp	.-2      	; 0x262 <main+0x7e>

00000264 <eeprom_read_byte>:
 264:	e1 99       	sbic	0x1c, 1	; 28
 266:	fe cf       	rjmp	.-4      	; 0x264 <eeprom_read_byte>
 268:	8e bb       	out	0x1e, r24	; 30
 26a:	e0 9a       	sbi	0x1c, 0	; 28
 26c:	99 27       	eor	r25, r25
 26e:	8d b3       	in	r24, 0x1d	; 29
 270:	08 95       	ret

00000272 <eeprom_write_byte>:
 272:	26 2f       	mov	r18, r22

00000274 <eeprom_write_r18>:
 274:	e1 99       	sbic	0x1c, 1	; 28
 276:	fe cf       	rjmp	.-4      	; 0x274 <eeprom_write_r18>
 278:	1c ba       	out	0x1c, r1	; 28
 27a:	8e bb       	out	0x1e, r24	; 30
 27c:	2d bb       	out	0x1d, r18	; 29
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	e2 9a       	sbi	0x1c, 2	; 28
 284:	e1 9a       	sbi	0x1c, 1	; 28
 286:	0f be       	out	0x3f, r0	; 63
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	08 95       	ret

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
