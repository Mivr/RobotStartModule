
StartModule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  0000044c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c9  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002a1  00000000  00000000  00000be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000502  00000000  00000000  00000e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000026a  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000482  00000000  00000000  000016c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__vector_2>
   6:	df c0       	rjmp	.+446    	; 0x1c6 <__vector_3>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a7 36       	cpi	r26, 0x67	; 103
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	ea d0       	rcall	.+468    	; 0x202 <main>
  2e:	d2 c1       	rjmp	.+932    	; 0x3d4 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <ir_init>:
void ir_init(void) {
	/*
	 * Variables
	 */

	curr_index = 0;
  32:	21 2c       	mov	r2, r1

	/*
	 * Init Timer0
	 */
	IR_CNT_PRESCALE_SET();
  34:	83 b7       	in	r24, 0x33	; 51
  36:	83 60       	ori	r24, 0x03	; 3
  38:	83 bf       	out	0x33, r24	; 51
	IR_CNT = 0;
  3a:	12 be       	out	0x32, r1	; 50
	IR_CNT_OVF_EN();
  3c:	89 b7       	in	r24, 0x39	; 57
  3e:	82 60       	ori	r24, 0x02	; 2
  40:	89 bf       	out	0x39, r24	; 57

	/*
	 * Init INT0
	 */
	IR_INT_EN();		// Enable int0
  42:	8b b7       	in	r24, 0x3b	; 59
  44:	80 62       	ori	r24, 0x20	; 32
  46:	8b bf       	out	0x3b, r24	; 59
	IR_ANY_EDGE_INT();	// Interrupt on any logical change
  48:	ac 9a       	sbi	0x15, 4	; 21
  4a:	08 95       	ret

0000004c <__vector_2>:
}

ISR (IR_PIN_ISR) {
  4c:	1f 92       	push	r1
  4e:	0f 92       	push	r0
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	0f 92       	push	r0
  54:	11 24       	eor	r1, r1
  56:	2f 93       	push	r18
  58:	3f 93       	push	r19
  5a:	4f 93       	push	r20
  5c:	5f 93       	push	r21
  5e:	6f 93       	push	r22
  60:	7f 93       	push	r23
  62:	8f 93       	push	r24
  64:	9f 93       	push	r25
  66:	af 93       	push	r26
  68:	bf 93       	push	r27
	static signed int cnt = 0;

	cnt += (signed int)IR_CNT + (signed int)(((unsigned int)timer_overflows) << 8);	// Save count
  6a:	22 b7       	in	r18, 0x32	; 50
  6c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timer_overflows>
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	98 2f       	mov	r25, r24
  74:	88 27       	eor	r24, r24
  76:	82 0f       	add	r24, r18
  78:	91 1d       	adc	r25, r1
  7a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
  7e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <_edata+0x1>
  82:	82 0f       	add	r24, r18
  84:	93 1f       	adc	r25, r19
  86:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  8a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	IR_CNT = 0;
  8e:	12 be       	out	0x32, r1	; 50
	timer_overflows = 0;
  90:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timer_overflows>

	switch (status)
  94:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <status>
  98:	81 11       	cpse	r24, r1
  9a:	04 c0       	rjmp	.+8      	; 0xa4 <__stack+0x5>
	{
		case IR_STARTBIT1:
		{
			if (IR_EDGE_LOW())
  9c:	b4 99       	sbic	0x16, 4	; 22
  9e:	84 c0       	rjmp	.+264    	; 0x1a8 <__stack+0x109>
			{
				status = IR_STARTBIT2;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	50 c0       	rjmp	.+160    	; 0x144 <__stack+0xa5>
		}
		break;
		
		default:
		{
			if ((cnt - MAX_ERROR) < BIT_CNT && (cnt + MAX_ERROR) > BIT_CNT)
  a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  ac:	09 2e       	mov	r0, r25
  ae:	00 0c       	add	r0, r0
  b0:	aa 0b       	sbc	r26, r26
  b2:	bb 0b       	sbc	r27, r27
  b4:	ac 01       	movw	r20, r24
  b6:	bd 01       	movw	r22, r26
  b8:	47 51       	subi	r20, 0x17	; 23
  ba:	51 09       	sbc	r21, r1
  bc:	61 09       	sbc	r22, r1
  be:	71 09       	sbc	r23, r1
  c0:	4f 36       	cpi	r20, 0x6F	; 111
  c2:	51 05       	cpc	r21, r1
  c4:	61 05       	cpc	r22, r1
  c6:	71 05       	cpc	r23, r1
  c8:	08 f0       	brcs	.+2      	; 0xcc <__stack+0x2d>
  ca:	6c c0       	rjmp	.+216    	; 0x1a4 <__stack+0x105>
  cc:	47 96       	adiw	r24, 0x17	; 23
  ce:	a1 1d       	adc	r26, r1
  d0:	b1 1d       	adc	r27, r1
  d2:	80 37       	cpi	r24, 0x70	; 112
  d4:	91 05       	cpc	r25, r1
  d6:	a1 05       	cpc	r26, r1
  d8:	b1 05       	cpc	r27, r1
  da:	08 f4       	brcc	.+2      	; 0xde <__stack+0x3f>
  dc:	53 c0       	rjmp	.+166    	; 0x184 <__stack+0xe5>
			{
				switch(status)
  de:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <status>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	59 f0       	breq	.+22     	; 0xfc <__stack+0x5d>
  e6:	2c f4       	brge	.+10     	; 0xf2 <__stack+0x53>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	09 f0       	breq	.+2      	; 0xee <__stack+0x4f>
  ec:	5d c0       	rjmp	.+186    	; 0x1a8 <__stack+0x109>
				{
					case IR_STARTBIT2:
					{
						status = IR_TOGGLEBIT;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	29 c0       	rjmp	.+82     	; 0x144 <__stack+0xa5>
		
		default:
		{
			if ((cnt - MAX_ERROR) < BIT_CNT && (cnt + MAX_ERROR) > BIT_CNT)
			{
				switch(status)
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	89 f0       	breq	.+34     	; 0x118 <__stack+0x79>
  f6:	84 30       	cpi	r24, 0x04	; 4
  f8:	61 f1       	breq	.+88     	; 0x152 <__stack+0xb3>
  fa:	56 c0       	rjmp	.+172    	; 0x1a8 <__stack+0x109>
						cnt = 0;
					}
					break;
					case IR_TOGGLEBIT:
					{
						curr_index = ADDR_LEN;
  fc:	95 e0       	ldi	r25, 0x05	; 5
  fe:	29 2e       	mov	r2, r25
						addr = 0;
 100:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <addr>
						cmd = 0;
 104:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cmd>
						cnt = 0;
 108:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 10c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
						status = IR_ADDR;
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <status>
					}
					break;
 116:	48 c0       	rjmp	.+144    	; 0x1a8 <__stack+0x109>
					case IR_ADDR:
					{
						curr_index--;
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	22 0d       	add	r18, r2
 11c:	22 2e       	mov	r2, r18
						if (IR_EDGE_LOW())
 11e:	b4 99       	sbic	0x16, 4	; 22
 120:	0c c0       	rjmp	.+24     	; 0x13a <__stack+0x9b>
						{
							addr |= _BV(curr_index);
 122:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <addr>
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 2e       	mov	r0, r18
 12c:	01 c0       	rjmp	.+2      	; 0x130 <__stack+0x91>
 12e:	88 0f       	add	r24, r24
 130:	0a 94       	dec	r0
 132:	ea f7       	brpl	.-6      	; 0x12e <__stack+0x8f>
 134:	83 2b       	or	r24, r19
 136:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <addr>
						}

						if (!curr_index)
 13a:	21 11       	cpse	r18, r1
 13c:	05 c0       	rjmp	.+10     	; 0x148 <__stack+0xa9>
						{
							curr_index = CMD_LEN;
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	28 2e       	mov	r2, r24
							status = IR_CMD;
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <status>
						}
						cnt = 0;
 148:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 14c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
					}
					break;
 150:	2b c0       	rjmp	.+86     	; 0x1a8 <__stack+0x109>
					case IR_CMD:
					{
						curr_index--;
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	22 0d       	add	r18, r2
 156:	22 2e       	mov	r2, r18
						if (IR_EDGE_LOW())
 158:	b4 99       	sbic	0x16, 4	; 22
 15a:	0c c0       	rjmp	.+24     	; 0x174 <__stack+0xd5>
						{
							cmd |= _BV(curr_index);
 15c:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <cmd>
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 2e       	mov	r0, r18
 166:	01 c0       	rjmp	.+2      	; 0x16a <__stack+0xcb>
 168:	88 0f       	add	r24, r24
 16a:	0a 94       	dec	r0
 16c:	ea f7       	brpl	.-6      	; 0x168 <__stack+0xc9>
 16e:	83 2b       	or	r24, r19
 170:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <cmd>
						}

						if (!curr_index)
 174:	21 11       	cpse	r18, r1
 176:	e8 cf       	rjmp	.-48     	; 0x148 <__stack+0xa9>
						{
							has_next = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <has_next>
							status = IR_STARTBIT1;
 17e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <status>
 182:	e2 cf       	rjmp	.-60     	; 0x148 <__stack+0xa9>
						cnt = 0;
					}
					break;
				}
			}
			else if ((cnt - MAX_ERROR) < HALF_BIT_CNT && (cnt + MAX_ERROR) > HALF_BIT_CNT)
 184:	47 33       	cpi	r20, 0x37	; 55
 186:	51 05       	cpc	r21, r1
 188:	61 05       	cpc	r22, r1
 18a:	71 05       	cpc	r23, r1
 18c:	58 f4       	brcc	.+22     	; 0x1a4 <__stack+0x105>
 18e:	c8 97       	sbiw	r24, 0x38	; 56
 190:	a1 05       	cpc	r26, r1
 192:	b1 05       	cpc	r27, r1
 194:	38 f0       	brcs	.+14     	; 0x1a4 <__stack+0x105>
			{
				cnt = HALF_BIT_CNT;	// Synchronize..
 196:	87 e3       	ldi	r24, 0x37	; 55
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 19e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__stack+0x109>
			}
			else
			{
				status = IR_STARTBIT1;
 1a4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <status>
			}
		}
		break;
	}
}
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_3>:

ISR (IR_CNT_ISR)
{
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	8f 93       	push	r24
	timer_overflows++;
 1d2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timer_overflows>
 1d6:	8f 5f       	subi	r24, 0xFF	; 255
 1d8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <timer_overflows>
	if (timer_overflows > 50)
 1dc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timer_overflows>
 1e0:	83 33       	cpi	r24, 0x33	; 51
 1e2:	10 f0       	brcs	.+4      	; 0x1e8 <__vector_3+0x22>
	{
		status = IR_STARTBIT1;
 1e4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <status>
	}
}
 1e8:	8f 91       	pop	r24
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <eeprom_write_byte_cli>:
	_delay_ms(500);
}

// Using a function and function calls takes less memory..
void eeprom_write_byte_cli(unsigned char address, unsigned char state) {
	cli();
 1f4:	f8 94       	cli
	eeprom_busy_wait();
 1f6:	e1 99       	sbic	0x1c, 1	; 28
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <eeprom_write_byte_cli+0x2>
	eeprom_write_byte((unsigned char*)(unsigned int)address, state);
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	de d0       	rcall	.+444    	; 0x3ba <eeprom_write_byte>
	sei();
 1fe:	78 94       	sei
 200:	08 95       	ret

00000202 <main>:
}

int main() {
	ir_init();
 202:	17 df       	rcall	.-466    	; 0x32 <ir_init>

	unsigned char currentState = eeprom_read_byte((unsigned char*)E_STATE_ADDRESS);
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	d1 d0       	rcall	.+418    	; 0x3ac <eeprom_read_byte>
 20a:	c8 2f       	mov	r28, r24
	unsigned char stopCommand = eeprom_read_byte((unsigned char*)E_STOPCMD_ADDRESS);
 20c:	8a e0       	ldi	r24, 0x0A	; 10
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	cd d0       	rcall	.+410    	; 0x3ac <eeprom_read_byte>
 212:	d8 2f       	mov	r29, r24
	unsigned char savedState = currentState;

	DDRB = _BV(LEDPIN) | _BV(KILLSWPIN) | _BV(STARTPIN);
 214:	87 e0       	ldi	r24, 0x07	; 7
 216:	87 bb       	out	0x17, r24	; 23
	PORTB = _BV(MODEPIN); // Pull-up on mode select pin
 218:	88 e0       	ldi	r24, 0x08	; 8
 21a:	88 bb       	out	0x18, r24	; 24

	sei();
 21c:	78 94       	sei
int main() {
	ir_init();

	unsigned char currentState = eeprom_read_byte((unsigned char*)E_STATE_ADDRESS);
	unsigned char stopCommand = eeprom_read_byte((unsigned char*)E_STOPCMD_ADDRESS);
	unsigned char savedState = currentState;
 21e:	1c 2f       	mov	r17, r28
				}
				break;

				case STARTED:
				{
					PORTB = _BV(STARTPIN) | _BV(LEDPIN) | _BV(KILLSWPIN) | _BV(MODEPIN);
 220:	0f e0       	ldi	r16, 0x0F	; 15

	sei();

	for(;;)
	{
		while(!has_next)
 222:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <has_next>
 226:	81 11       	cpse	r24, r1
 228:	55 c0       	rjmp	.+170    	; 0x2d4 <main+0xd2>
		{
			switch (currentState)
 22a:	c2 30       	cpi	r28, 0x02	; 2
 22c:	89 f0       	breq	.+34     	; 0x250 <main+0x4e>
 22e:	30 f4       	brcc	.+12     	; 0x23c <main+0x3a>
 230:	c1 30       	cpi	r28, 0x01	; 1
 232:	09 f0       	breq	.+2      	; 0x236 <main+0x34>
 234:	a7 c0       	rjmp	.+334    	; 0x384 <main+0x182>
			{
				case POWERON:
				{
					PORTB = _BV(MODEPIN) | _BV(KILLSWPIN);
 236:	8a e0       	ldi	r24, 0x0A	; 10
 238:	88 bb       	out	0x18, r24	; 24
				}
				break;
 23a:	a7 c0       	rjmp	.+334    	; 0x38a <main+0x188>

	for(;;)
	{
		while(!has_next)
		{
			switch (currentState)
 23c:	c3 30       	cpi	r28, 0x03	; 3
 23e:	51 f0       	breq	.+20     	; 0x254 <main+0x52>
 240:	c4 30       	cpi	r28, 0x04	; 4
 242:	09 f0       	breq	.+2      	; 0x246 <main+0x44>
 244:	9f c0       	rjmp	.+318    	; 0x384 <main+0x182>
				}
				break;

				case STOPPED:
				{
					PORTB = _BV(MODEPIN);
 246:	88 e0       	ldi	r24, 0x08	; 8
 248:	88 bb       	out	0x18, r24	; 24
					eeprom_write_byte_cli(E_STATE_ADDRESS, POWERON);
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	d3 df       	rcall	.-90     	; 0x1f4 <eeprom_write_byte_cli>
 24e:	1b c0       	rjmp	.+54     	; 0x286 <main+0x84>
				}
				break;

				case STARTED:
				{
					PORTB = _BV(STARTPIN) | _BV(LEDPIN) | _BV(KILLSWPIN) | _BV(MODEPIN);
 250:	08 bb       	out	0x18, r16	; 24
				}
				break;
 252:	9b c0       	rjmp	.+310    	; 0x38a <main+0x188>

				case STOPPED_SAFE:
				{
					PORTB = _BV(MODEPIN);
 254:	88 e0       	ldi	r24, 0x08	; 8
 256:	88 bb       	out	0x18, r24	; 24
					eeprom_write_byte_cli(E_STATE_ADDRESS, STOPPED_SAFE);
 258:	63 e0       	ldi	r22, 0x03	; 3
 25a:	cc df       	rcall	.-104    	; 0x1f4 <eeprom_write_byte_cli>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	2f ed       	ldi	r18, 0xDF	; 223
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	97 e0       	ldi	r25, 0x07	; 7
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <main+0x60>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0x6a>
 26c:	00 00       	nop
 26e:	2f ed       	ldi	r18, 0xDF	; 223
 270:	84 e0       	ldi	r24, 0x04	; 4
 272:	97 e0       	ldi	r25, 0x07	; 7
 274:	21 50       	subi	r18, 0x01	; 1
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x72>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x7c>
 27e:	00 00       	nop
					delay_500();
					delay_500();
					currentState = STOPPED;
					has_next = 0;
 280:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <has_next>
				}
				break;
 284:	80 c0       	rjmp	.+256    	; 0x386 <main+0x184>
				{
					PORTB = _BV(MODEPIN);
					eeprom_write_byte_cli(E_STATE_ADDRESS, POWERON);
					for (;;)
					{
						LED_ON();
 286:	c0 9a       	sbi	0x18, 0	; 24
 288:	2f ed       	ldi	r18, 0xDF	; 223
 28a:	84 e0       	ldi	r24, 0x04	; 4
 28c:	97 e0       	ldi	r25, 0x07	; 7
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <main+0x8c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0x96>
 298:	00 00       	nop
 29a:	2f ed       	ldi	r18, 0xDF	; 223
 29c:	84 e0       	ldi	r24, 0x04	; 4
 29e:	97 e0       	ldi	r25, 0x07	; 7
 2a0:	21 50       	subi	r18, 0x01	; 1
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <main+0x9e>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <main+0xa8>
 2aa:	00 00       	nop
						delay_500();
						delay_500();
						LED_OFF();
 2ac:	c0 98       	cbi	0x18, 0	; 24
 2ae:	2f ed       	ldi	r18, 0xDF	; 223
 2b0:	84 e0       	ldi	r24, 0x04	; 4
 2b2:	97 e0       	ldi	r25, 0x07	; 7
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0xb2>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0xbc>
 2be:	00 00       	nop
 2c0:	2f ed       	ldi	r18, 0xDF	; 223
 2c2:	84 e0       	ldi	r24, 0x04	; 4
 2c4:	97 e0       	ldi	r25, 0x07	; 7
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0xc4>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0xce>
 2d0:	00 00       	nop
 2d2:	d9 cf       	rjmp	.-78     	; 0x286 <main+0x84>
				eeprom_write_byte_cli(E_STATE_ADDRESS, currentState);
				delay_500();
				savedState = currentState;
			}
		}
		has_next = 0;
 2d4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <has_next>

		if (addr == RC5_ADR_PROGRAMMING)
 2d8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <addr>
 2dc:	8b 30       	cpi	r24, 0x0B	; 11
 2de:	49 f5       	brne	.+82     	; 0x332 <main+0x130>
		{
			stopCommand = cmd & 0b11111110;
 2e0:	d0 91 66 00 	lds	r29, 0x0066	; 0x800066 <cmd>
 2e4:	de 7f       	andi	r29, 0xFE	; 254
			LED_ON();
 2e6:	c0 9a       	sbi	0x18, 0	; 24
 2e8:	2f ed       	ldi	r18, 0xDF	; 223
 2ea:	84 e0       	ldi	r24, 0x04	; 4
 2ec:	97 e0       	ldi	r25, 0x07	; 7
 2ee:	21 50       	subi	r18, 0x01	; 1
 2f0:	80 40       	sbci	r24, 0x00	; 0
 2f2:	90 40       	sbci	r25, 0x00	; 0
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <main+0xec>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <main+0xf6>
 2f8:	00 00       	nop
			delay_500();
			eeprom_write_byte_cli(E_STOPCMD_ADDRESS, stopCommand);
 2fa:	6d 2f       	mov	r22, r29
 2fc:	8a e0       	ldi	r24, 0x0A	; 10
 2fe:	7a df       	rcall	.-268    	; 0x1f4 <eeprom_write_byte_cli>
			LED_OFF();
 300:	c0 98       	cbi	0x18, 0	; 24
 302:	2f ed       	ldi	r18, 0xDF	; 223
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	97 e0       	ldi	r25, 0x07	; 7
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	80 40       	sbci	r24, 0x00	; 0
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <main+0x106>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0x110>
 312:	00 00       	nop
			delay_500();
			LED_ON();
 314:	c0 9a       	sbi	0x18, 0	; 24
 316:	2f ed       	ldi	r18, 0xDF	; 223
 318:	84 e0       	ldi	r24, 0x04	; 4
 31a:	97 e0       	ldi	r25, 0x07	; 7
 31c:	21 50       	subi	r18, 0x01	; 1
 31e:	80 40       	sbci	r24, 0x00	; 0
 320:	90 40       	sbci	r25, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <main+0x11a>
 324:	00 c0       	rjmp	.+0      	; 0x326 <main+0x124>
 326:	00 00       	nop
			delay_500();
			LED_OFF();
 328:	c0 98       	cbi	0x18, 0	; 24
			has_next = 0;
 32a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <has_next>
			currentState = POWERON;
 32e:	c1 e0       	ldi	r28, 0x01	; 1
 330:	78 cf       	rjmp	.-272    	; 0x222 <main+0x20>
		}
		else
		{
			switch (currentState)
 332:	c1 30       	cpi	r28, 0x01	; 1
 334:	19 f0       	breq	.+6      	; 0x33c <main+0x13a>
 336:	c2 30       	cpi	r28, 0x02	; 2
 338:	a9 f0       	breq	.+42     	; 0x364 <main+0x162>
 33a:	73 cf       	rjmp	.-282    	; 0x222 <main+0x20>
			{
				case POWERON:
				{
					if (addr == RC5_ADR_EXPERIMENTAL && IS_COMP_MODE)
 33c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <addr>
 340:	87 30       	cpi	r24, 0x07	; 7
 342:	59 f4       	brne	.+22     	; 0x35a <main+0x158>
					{
						if (cmd == (stopCommand + 1))
 344:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <cmd>
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	8d 2f       	mov	r24, r29
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	28 17       	cp	r18, r24
 352:	39 07       	cpc	r19, r25
 354:	59 f4       	brne	.+22     	; 0x36c <main+0x16a>
					}
					else
					{
						if (cmd == HOME_START)
						{
							currentState = STARTED;
 356:	c2 e0       	ldi	r28, 0x02	; 2
 358:	64 cf       	rjmp	.-312    	; 0x222 <main+0x20>
							currentState = STOPPED_SAFE;
						}
					}
					else
					{
						if (cmd == HOME_START)
 35a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cmd>
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	51 f4       	brne	.+20     	; 0x376 <main+0x174>
 362:	f9 cf       	rjmp	.-14     	; 0x356 <main+0x154>
				}
				break;

			case STARTED:
				{
					if (addr == RC5_ADR_EXPERIMENTAL && IS_COMP_MODE)
 364:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <addr>
 368:	87 30       	cpi	r24, 0x07	; 7
 36a:	29 f4       	brne	.+10     	; 0x376 <main+0x174>
					{
						if (cmd == stopCommand)
 36c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cmd>
 370:	8d 13       	cpse	r24, r29
 372:	57 cf       	rjmp	.-338    	; 0x222 <main+0x20>
 374:	05 c0       	rjmp	.+10     	; 0x380 <main+0x17e>
							currentState = STOPPED_SAFE;
						}
					}
					else
					{
						if (cmd == HOME_STOP)
 376:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cmd>
 37a:	82 30       	cpi	r24, 0x02	; 2
 37c:	09 f0       	breq	.+2      	; 0x380 <main+0x17e>
 37e:	51 cf       	rjmp	.-350    	; 0x222 <main+0x20>
						{
							currentState = STOPPED_SAFE;
 380:	c3 e0       	ldi	r28, 0x03	; 3
 382:	4f cf       	rjmp	.-354    	; 0x222 <main+0x20>
				break;
					// When eeprom is undefined we might end up here (after programming)
				default:
				{
					currentState = STOPPED;
					stopCommand = DEFAULT_STOP_CMD;
 384:	d4 e0       	ldi	r29, 0x04	; 4
	eeprom_busy_wait();
	eeprom_write_byte((unsigned char*)(unsigned int)address, state);
	sei();
}

int main() {
 386:	c4 e0       	ldi	r28, 0x04	; 4
 388:	4c cf       	rjmp	.-360    	; 0x222 <main+0x20>
					stopCommand = DEFAULT_STOP_CMD;
				}
					break;
			}

			if (savedState != currentState && currentState != STOPPED)
 38a:	1c 17       	cp	r17, r28
 38c:	09 f4       	brne	.+2      	; 0x390 <main+0x18e>
 38e:	49 cf       	rjmp	.-366    	; 0x222 <main+0x20>
			{
				eeprom_write_byte_cli(E_STATE_ADDRESS, currentState);
 390:	6c 2f       	mov	r22, r28
 392:	88 e0       	ldi	r24, 0x08	; 8
 394:	2f df       	rcall	.-418    	; 0x1f4 <eeprom_write_byte_cli>
 396:	2f ed       	ldi	r18, 0xDF	; 223
 398:	84 e0       	ldi	r24, 0x04	; 4
 39a:	97 e0       	ldi	r25, 0x07	; 7
 39c:	21 50       	subi	r18, 0x01	; 1
 39e:	80 40       	sbci	r24, 0x00	; 0
 3a0:	90 40       	sbci	r25, 0x00	; 0
 3a2:	e1 f7       	brne	.-8      	; 0x39c <main+0x19a>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <main+0x1a4>
 3a6:	00 00       	nop
 3a8:	1c 2f       	mov	r17, r28
 3aa:	3b cf       	rjmp	.-394    	; 0x222 <main+0x20>

000003ac <eeprom_read_byte>:
 3ac:	e1 99       	sbic	0x1c, 1	; 28
 3ae:	fe cf       	rjmp	.-4      	; 0x3ac <eeprom_read_byte>
 3b0:	8e bb       	out	0x1e, r24	; 30
 3b2:	e0 9a       	sbi	0x1c, 0	; 28
 3b4:	99 27       	eor	r25, r25
 3b6:	8d b3       	in	r24, 0x1d	; 29
 3b8:	08 95       	ret

000003ba <eeprom_write_byte>:
 3ba:	26 2f       	mov	r18, r22

000003bc <eeprom_write_r18>:
 3bc:	e1 99       	sbic	0x1c, 1	; 28
 3be:	fe cf       	rjmp	.-4      	; 0x3bc <eeprom_write_r18>
 3c0:	1c ba       	out	0x1c, r1	; 28
 3c2:	8e bb       	out	0x1e, r24	; 30
 3c4:	2d bb       	out	0x1d, r18	; 29
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	f8 94       	cli
 3ca:	e2 9a       	sbi	0x1c, 2	; 28
 3cc:	e1 9a       	sbi	0x1c, 1	; 28
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	08 95       	ret

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
